import {
  require_react
} from "./chunk-YSDLPTTY.js";
import {
  __toESM
} from "./chunk-ZS7NZCD4.js";

// node_modules/react-lazy-load/dist/LazyLoad.js
var import_react = __toESM(require_react());
var h = Object.defineProperty;
var u = (n, t, e) => t in n ? h(n, t, { enumerable: true, configurable: true, writable: true, value: e }) : n[t] = e;
var c = (n, t, e) => (u(n, typeof t != "symbol" ? t + "" : t, e), e);
var p = (n, t) => typeof getComputedStyle < "u" ? getComputedStyle(n, null).getPropertyValue(t) : n.style.getPropertyValue(t);
var y = (n) => p(n, "overflow") + p(n, "overflow-y") + p(n, "overflow-x");
var w = (n) => {
  if (!(n instanceof HTMLElement))
    return window;
  let t = n;
  for (; t && !(t === document.body || t === document.documentElement || !t.parentNode); ) {
    if (/(scroll|auto)/.test(y(t)))
      return t;
    t = t.parentNode;
  }
  return window;
};
var g = class extends import_react.Component {
  constructor(e) {
    super(e);
    c(this, "elementObserver");
    c(this, "wrapper");
    c(this, "lazyLoadHandler", (e2) => {
      var o, i;
      const {
        onContentVisible: s
      } = this.props, [r] = e2, {
        isIntersecting: l
      } = r;
      if (l) {
        this.setState({
          visible: true
        }, () => {
          s && s();
        });
        const a = (o = this.wrapper) == null ? void 0 : o.current;
        a && a instanceof HTMLElement && ((i = this.elementObserver) == null || i.unobserve(a));
      }
    });
    this.elementObserver = null, this.wrapper = import_react.default.createRef(), this.state = {
      visible: false
    };
  }
  componentDidMount() {
    var o;
    this.getEventNode();
    const {
      offset: e,
      threshold: s
    } = this.props, r = {
      rootMargin: typeof e == "number" ? `${e}px` : e || "0px",
      threshold: s || 0
    };
    this.elementObserver = new IntersectionObserver(this.lazyLoadHandler, r);
    const l = (o = this.wrapper) == null ? void 0 : o.current;
    l instanceof HTMLElement && this.elementObserver.observe(l);
  }
  shouldComponentUpdate(e, s) {
    return s.visible;
  }
  componentWillUnmount() {
    var s, r;
    const e = (s = this.wrapper) == null ? void 0 : s.current;
    e && e instanceof HTMLElement && ((r = this.elementObserver) == null || r.unobserve(e));
  }
  getEventNode() {
    var e;
    return w((e = this.wrapper) == null ? void 0 : e.current);
  }
  render() {
    const {
      children: e,
      className: s,
      height: r,
      width: l,
      elementType: o
    } = this.props, {
      visible: i
    } = this.state, a = {
      height: r,
      width: l
    }, d = `LazyLoad${i ? " is-visible" : ""}${s ? ` ${s}` : ""}`;
    return (0, import_react.createElement)(o || "div", {
      className: d,
      style: a,
      ref: this.wrapper
    }, i && import_react.Children.only(e));
  }
};
c(g, "defaultProps", {
  elementType: "div",
  className: "",
  offset: 0,
  threshold: 0,
  width: null,
  onContentVisible: null,
  height: null
});
export {
  g as default
};
//# sourceMappingURL=react-lazy-load.js.map
